<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HenryZeng</title>
  
  
  <link href="https://henryzeng-zero.github.io/atom.xml" rel="self"/>
  
  <link href="https://henryzeng-zero.github.io/"/>
  <updated>2022-06-29T06:16:21.492Z</updated>
  <id>https://henryzeng-zero.github.io/</id>
  
  <author>
    <name>HenryZeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛谷 P1888 三角函数</title>
    <link href="https://henryzeng-zero.github.io/2022/03/15/%E6%B4%9B%E8%B0%B7-P1888-%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    <id>https://henryzeng-zero.github.io/2022/03/15/%E6%B4%9B%E8%B0%B7-P1888-%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/</id>
    <published>2022-03-15T12:53:19.000Z</published>
    <updated>2022-06-29T06:16:21.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一组勾股数 a,b,c $(a\neq b\neq c)$ 用分数格式输出其较小锐角的正弦值。（要求约分）</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行，包含三个正整数，即勾股数 a,b,c（无大小顺序）。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行，包含一个分数，即较小锐角的正弦值</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入 #1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 5 4</span><br></pre></td></tr></table></figure><p>输出 #1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3/5</span><br></pre></td></tr></table></figure><h3 id="说明-x2F-提示"><a href="#说明-x2F-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>数据保证：$a,b,c\in \complement _{\mathbb{N} _+}\left[ 1\left. ,10^9 \right] \right.$</p><p>原题见：<a href="https://www.luogu.com.cn/problem/P1888">P1888 三角函数</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="/2022/03/15/%E6%B4%9B%E8%B0%B7-P1888-%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/%E4%B8%89%E8%A7%92%E5%BD%A2.svg"></p><p>不难看出，因为给的是勾股数，所以求较小锐角的正弦值只要找到a,b,c中的最大值和最小值即可计算。真正需要动脑筋的是后面的约分。约分的核心是找到两个数的最大公约数后将两个数分别除之即可得，那么问题就转化成了求取最大值和最小值的最大公约数。</p><p>求最大公约数的方法有二，其一是<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">欧几里得算法</a>又称辗转相除法，其二是<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF">更相减损术</a>，他们的本质其实都是在缩小待求解数据的规模，把大的数据一步步变小，各有优劣，编写代码时综合两者会得到更高的运算效率。</p><h2 id="补充芝士🧀-知识"><a href="#补充芝士🧀-知识" class="headerlink" title="补充芝士🧀(知识)"></a>补充芝士🧀(知识)</h2><p>最大公约数,英文名：Greatest Common Divisor 缩写为：gcd</p><p>如果数a能被数b整除，a就叫做b的倍数，b就叫做a的约数。</p><p>$a|b$ 表示 $a$ 能整除 $b$ （$a$ 为 $b$ 的约数）。</p><p>$gcd(a,b)$ 表示 $a,b$ 的最大公约数。</p><p>$a \bmod b$ 表示 $a$ 除以 $b$ 取余数。</p><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>运算实质:<br>$$<br>gcd(a,b) &#x3D; gcd(b,a\bmod b)<br>$$</p><p>即$a,b\ (a&gt;b)$的最大公约数可转化为求 $b,b&#x2F;a$ 余数的最大公约数,而运算的终止为 $gcd(m,n)\ (n&#x3D;0)$，n为零表明完全整除，此时得出最大公约数为m。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>有$a，b，k，r \in N_{+}$<br>$a$ 可以表示成 $a &#x3D; kb + r$ ， $r$ 即为 $a \bmod b$。<br>假设 $d$ 是 $a,b$ 的一个公约数，记作 $d|a,d|b$。<br>而 $r &#x3D; a - kb$ ，两边同时除以 $d$ ，$r&#x2F;d&#x3D;a&#x2F;d-kb&#x2F;d$ ，因为 $k$ 为整数，所以 $kb$ 可以整除d，故而 $r&#x2F;d$ 也为整数，因此 $d|r$。<br>因此 $d$ 也是 $b,a \bmod b$ 的公约数。<br>因 $a,b$ 和 $b,a \bmod b$ 的公约数相等，则其最大公约数也相等。</p><p>证毕  </p><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gcd(a,b) -&gt; gcd(b,a%b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = a%b;</span><br><span class="line">    <span class="keyword">while</span>(r &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        a = b;</span><br><span class="line">        b = r;</span><br><span class="line">        r = a%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">gcd</span>(<span class="number">10</span>,<span class="number">5</span>); <span class="comment">// 测试gcd函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更相减损术"><a href="#更相减损术" class="headerlink" title="更相减损术"></a>更相减损术</h2><p>运算实质: </p><p>$$<br>gcd(a,b) &#x3D; \begin{cases}<br>  \text{ gcd(a,a-b) } (a&gt;b) \\<br>  \text{ gcd(b,b-a) } (a&lt;b)<br>\end{cases}<br>$$</p><p>原文：</p><blockquote><p>可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。</p></blockquote><p>译文：（如果需要对分数进行约分，那么）可以折半的话，就折半（也就是用2来约分）。如果不可以折半的话，那么就比较分母和分子的大小，用大数减去小数，重复此过程，一直到减数与差相等为止，用这个相等的数字来约分。</p><p>它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。</p><blockquote><p>摘自百度百科<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF">更相减损术</a></p></blockquote><h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>有$a，b，k，r \in N_{+}$<br>$r$ 可以表示成 $r &#x3D; a - b\ (a&gt;b)$<br>假设 $d$ 是 $a,b$ 的一个公约数，记作 $d|a,d|b$，两边同时除以 $d$ ，$r&#x2F;d&#x3D;a&#x2F;d-b&#x2F;d$ ，易得 $r&#x2F;d$ 也为整数，因此 $d|r$<br>因此 $d$ 也是 $b,a - b$ 的公约数。<br>因 $a,b$ 和 $b,a \bmod b$ 的公约数相等，则其最大公约数也相等。</p><p>证毕  </p><h3 id="样例代码-1"><a href="#样例代码-1" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(a != b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">gcd</span>(<span class="number">100</span>,<span class="number">66</span>); <span class="comment">// 测试 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Big-Surprise-两个算法的图证法"><a href="#Big-Surprise-两个算法的图证法" class="headerlink" title="Big Surprise [两个算法的图证法]"></a>Big Surprise [两个算法的图证法]</h2><p><img src="/2022/03/15/%E6%B4%9B%E8%B0%B7-P1888-%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%B3%95%E5%9B%BE%E8%AF%81.svg"></p><p>求最大公约数的本质其实是求得一个可以被两个参量同时整除的数，基于这个事实，我们可以将这个抽象的问题具象化：有一个长a宽b的矩形区域，现在要求用某一尺寸的小正方形将其铺满。当边长为c的小正方形可以铺满矩形时，必然存在c为a，b的公约数，当c最大时，此时的c为a，b的最大公约数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导入&quot;&gt;&lt;a href=&quot;#导入&quot; class=&quot;headerlink&quot; title=&quot;导入&quot;&gt;&lt;/a&gt;导入&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h</summary>
      
    
    
    
    <category term="洛谷刷题" scheme="https://henryzeng-zero.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="C++" scheme="https://henryzeng-zero.github.io/tags/C/"/>
    
    <category term="算法" scheme="https://henryzeng-zero.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="证明" scheme="https://henryzeng-zero.github.io/tags/%E8%AF%81%E6%98%8E/"/>
    
  </entry>
  
</feed>
